{"version":3,"sources":["components/Country.tsx","components/WorldMap.tsx","components/Panel.tsx","components/Dashboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Country","props","useState","hovered","setHovered","key","i","d","fill","stroke","strokeWidth","onClick","onCountryChange","options","properties","name","onMouseEnter","onMouseLeave","projection","geoOrthographic","scale","translate","WorldMap","isLoading","setIsLoading","geographies","setGeographies","useEffect","didCancel","a","fetch","headers","Accept","then","response","json","body","console","log","topology","features","feature","objects","countries","error","warn","fetchData","handleCountryChange","countryId","width","height","viewBox","className","map","geoPath","Panel","countryName","recipeNames","length","recipeName","Dashboard","setCountryName","App","setRecipeNames","redditCountryList","setRedditCountryList","promise1","data","jsonFormat","country","promise2","geometries","geometry","Promise","all","reddit","geo","secondNotInFirst","filter","g","includes","firstNotInSecond","r","recipes","find","redditCountry","recipe","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.dd37d567.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\n/**\n * Encapsulates a portion of the UI. It gets its properties from the parent Map, and it emits\n * a click event back to the parent.\n * Props come from World Map\n */\nconst Country = (props: {\n  onCountryChange: (arg0: any) => void;\n  i: number;\n  d: any;\n  options: any;\n}) => {\n  // Use the `useState` hook to store local state\n  const [hovered, setHovered] = useState(false);\n\n  const handleCountryClick = () => {\n    props.onCountryChange(props.options.properties.name);\n  };\n\n  const handleMouseEnter = () => {\n    setHovered(true);\n    props.onCountryChange(props.options.properties.name);\n  };\n\n  const handleMouseLeave = () => {\n    setHovered(false);\n  };\n\n  // console.log(`${props.i} ${props.d}`);\n  // console.log(`${JSON.stringify(props.options)}`);\n  // console.log(`${props.options.id} ${props.options.properties.name}`);\n\n  return (\n    <path\n      key={`path-${props.i}`}\n      d={props.d}\n      fill={hovered ? \"red\" : \"rgb(67.8, 84.7, 90.2)\"}\n      stroke={hovered ? \"red\" : \"#FFFFFF\"}\n      strokeWidth={1}\n      onClick={handleCountryClick}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    />\n  );\n};\n\nexport default Country;\n","import React, { useEffect, useState } from \"react\";\nimport { geoOrthographic, geoPath } from \"d3-geo\";\nimport { Topology } from \"topojson-specification\";\nimport { feature } from \"topojson-client\";\nimport {\n  Geometry,\n  Feature,\n  FeatureCollection,\n  GeoJsonProperties,\n} from \"geojson\";\n\nimport \"./WorldMap.css\";\n\nimport Country from \"./Country\";\n\n/*\n  WorldAtlas has the following schema:\n  * objects:\n    * countries (GeometryCollection)\n      * geometries: Collection<Polygon | MultiPolygon>\n    * land (GeometryCollection)\n      * geometries: Collection<Polygon | MultiPolygon>\n  * arcs: number[][][]\n  * bbox: number[]\n  * transform\n    * scale: number[]\n    * translate: number[]\n*/\n\nconst projection = geoOrthographic()\n  .scale(240)\n  .translate([800 / 2, 600 / 2]);\n\nconst WorldMap = (props: any) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [geographies, setGeographies] = useState<\n    Feature<Geometry, GeoJsonProperties>[]\n  >();\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      setIsLoading(true);\n\n      try {\n        fetch(\"data/world-110m.json\", {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n          },\n        }).then((response) => {\n          // See if this can be cleaned up\n\n          response.json().then((body) => {\n            console.log(\"body\", body);\n\n            const topology: Topology = (body as unknown) as Topology;\n\n            const features = feature(\n              topology,\n              topology.objects.countries\n            ) as FeatureCollection<Geometry, GeoJsonProperties>;\n\n            if (features) !didCancel && setGeographies(features.features);\n          });\n        });\n      } catch (error) {\n        console.warn(error);\n      } finally {\n        !didCancel && setIsLoading(false);\n      }\n    };\n\n    fetchData();\n    return () => {\n      didCancel = true;\n    }; // cleans up state after component is destroyed\n  }, []); // empty array argument ensures that useEffect only fires when component mounts; second argument tells when to re-update\n\n  // Event handler for when Country emits a focus event (click or mouseover)\n  const handleCountryChange = (countryId: any) => {\n    // console.log(\"WorldMap Country Change: \", countryId);\n\n    // bubble up to the Dashboard\n    props.onCountryChange(countryId);\n  };\n\n  return isLoading ? (\n    <div>Loading...</div>\n  ) : (\n    <svg width={800} height={600} viewBox=\"0 0 800 600\">\n      <g className=\"countries\">\n        {!geographies\n          ? \"Loading data...\"\n          : geographies.map((d, i, a) => (\n              <Country\n                key={i}\n                options={d}\n                d={geoPath().projection(projection)(d)}\n                i={i}\n                onCountryChange={handleCountryChange}\n              />\n            ))}\n      </g>\n    </svg>\n  );\n};\n\nexport default WorldMap;\n","import React from \"react\";\n\nimport \"./Panel.css\";\n\nconst Panel = (props: {\n  countryName: string | undefined;\n  recipeNames: string[] | undefined;\n}) => {\n  return (\n    <div className=\"panel\">\n      <div>\n        <h2>Country</h2>\n        <div className=\"country-name-container\">\n          <p className=\"country-name\">{props.countryName}</p>\n        </div>\n        <h3>List of Recipes</h3>\n        <ul>\n          {!props.recipeNames || props.recipeNames.length === 0 ? (\n            <p>Oops, no recipes found</p>\n          ) : (\n            props.recipeNames.map((recipeName, i) => (\n              <li key={i}>{recipeName}</li>\n            ))\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Panel;\n","import React, { useState } from \"react\";\nimport WorldMap from \"./WorldMap\";\nimport Panel from \"./Panel\";\n\nimport \"./Dashboard.css\";\n\n/*\n  The Dashboard is the outer-most level of the web application.\n  The Dashboard contains:\n  * A Map\n  * A Search Bar\n  * A Panel showing the list of recipes for the selected country\n  * A Panel which lets the user toggle between lists of data\n*/\n\nconst Dashboard = (props: {\n  onCountryChange: (arg: any) => void;\n  recipeNames: string[] | undefined;\n}) => {\n  const [countryName, setCountryName] = useState<string>();\n\n  const handleCountryChange = (countryName: any) => {\n    // console.log(\"Country change in Dashboard: \", countryId);\n    props.onCountryChange(countryName);\n    setCountryName(countryName);\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <Panel countryName={countryName} recipeNames={props.recipeNames} />\n      <WorldMap onCountryChange={handleCountryChange} />\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nimport Dashboard from \"./components/Dashboard\";\n// import { Topology } from \"topojson-specification\";\nimport { Country } from \"./models/Country\";\n\nfunction App() {\n  const [recipeNames, setRecipeNames] = useState<string[]>();\n  const [redditCountryList, setRedditCountryList] = useState<Country[]>();\n\n  const handleCountryChange = (countryName: any) => {\n    // console.log(\"App:\", countryName);\n    const recipes: string[] | undefined = redditCountryList\n      ?.find((redditCountry) => redditCountry.name === countryName)\n      ?.recipes.map((recipe) => recipe.name);\n    setRecipeNames(recipes);\n  };\n\n  useEffect(() => {\n    const promise1 = fetch(\"data/national-dish-of-your-country.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    }).then((data) => {\n      // Coerce into an array of Countries\n      return data.json().then((jsonFormat) => {\n        const countries: Country[] = jsonFormat;\n        setRedditCountryList(countries);\n        return countries.map((country) => country.name);\n      });\n    });\n\n    const promise2 = fetch(\"data/world-110m.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    }).then((data) => {\n      // Coerce into an array of Countries\n      return data.json().then((body) => {\n        const topology = body;\n\n        return topology.objects.countries.geometries.map(\n          (geometry: any) => geometry.properties.name\n        ) as string[];\n      });\n    });\n\n    Promise.all([promise1, promise2]).then(([reddit, geo]) => {\n      console.log(\"numFirst\", reddit.length);\n      console.log(\"numSecond\", geo.length);\n      const secondNotInFirst = geo.filter((g) => !reddit.includes(g));\n      const firstNotInSecond = reddit.filter((r) => !geo.includes(r));\n\n      console.log(\"firstNotInSecond\", firstNotInSecond);\n      console.log(\"secondNotInFirst\", secondNotInFirst);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Dashboard\n        onCountryChange={handleCountryChange}\n        recipeNames={recipeNames}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}